ggplot(data = training, aes(y = c(1:nrow(training))
, x = cutCS)) + geom_boxplot() + geom_jitter(col = "blue") +
theme_bw()
)
ggplot(data = training, aes(y = c(1:nrow(training))
, x = cutCS) + geom_boxplot() + geom_jitter(col = "blue") +
theme_bw()
)
ggplot(data = training, aes(y = c(1:nrow(training))
, x = cutCS) + geom_boxplot() + geom_jitter(col = "blue") +
theme_bw()
ggplot(data = training, aes(y = c(1:nrow(training))
, x = cut2(training$CompressiveStrength)) + geom_boxplot() + geom_jitter(col = "blue") +
theme_bw()
ggplot(data = training, aes(y = c(1:nrow(training))
, x = cut2(training$CompressiveStrength))) + geom_boxplot() + geom_jitter(col = "blue") +
theme_bw()
featurePlot(x = training[, names(concrete)], y = cut2(training$CompressiveStrength), plot = "box")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training$SuperPlasticizer)
training$SuperPlasticizer
training
hist(mixtures$SuperPlasticizer)
mixtures$SuperPlasticizer
names(concrete)
summary(concrete)
hist(concrete[,5])
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
summary(training)
names(training)
sub_training = training[,58:69]
head(sub_training)
preProcess(sub_training)
summary(preProcess(sub_training))
p <- preProcess(training, method = c("center", "scale"))
p <- preProcess(sub_training, method = c("center", "scale"))
p
symmary(P)
summary(P)
summary(p)
tp <- predict(p, sub_training)
tp
summary(tp)
summary(sub_training)
sapply(tp, mean/sd)
sapply(tp, mean)
sapply(tp, sd)
p <- preProcess(sub_training, method = c("pca"), thresh=0.8)
tp <- predict(p, sub_training)
sapply(tp, mean)
sapply(tp, sd)
p
names(p)
p$thresh
p$pacComp
p$pcaComp
p[1]
p[2]
p[3]
p[4]
p[et]
p[5]
p[6]
p[7]
p[8]
p[9]
p[10]
p <- preProcess(sub_training, method = "pca", thresh=0.8)
tp <- predict(p, sub_training)
tp
names(tp)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
adData
dim(diagnosis)
diagnosis
names(adData)
modelFit.1 <- train(diagnosis ~ ., method = "glm", data = sub_training)
modelFit.2 <- train(diagnosis ~ ., method = "glm", preProcess = "pca",
data =sub_training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
modelFit.1 <- train(subt$diagnosis ~ ., method = "glm", data = subt)
subt <- training[,c(1, 58:69)]
modelFit.1 <- train(subt$diagnosis ~ ., method = "glm", data = subt)
?train()
install.packages("e1071")
modelFit.1 <- train(subt$diagnosis ~ ., method = "glm", data = subt)
summary(modelFit.1)
modelFit.2 <- train(diagnosis ~ ., method = "glm", preProcess = "pca",
data =sub_training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
modelFit.2 <- train(subt$diagnosis ~ ., method = "glm", preProcess = "pca",
data =subt, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
summary(modelFit.2)
names(modelFit.2)
modelFit.1$results
modelFit.2$results
predict(modelFit.1, testing)
?confusionMatrix()
confusionMatrix(testing,predict(modelFit.1, testing))
confusionMatrix(testing$diagnosis,predict(modelFit.1, testing))
confusionMatrix(testing$diagnosis,predict(modelFit.2, testing))
?createDataPartition()
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
dim(trainIndex)
training = adData[trainIndex,]
testing = adData[trainIndex,]
trainIndex = createDataPartition(diagnosis,p=0.5)
dim(trainIndex)
training = adData[trainIndex,]
testing = adData[trainIndex,]
```{r}
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
sub_training = training[,58:69]
p <- preProcess(sub_training, method = "pca", thresh=0.9)
tp <- predict(p, sub_training)
p$rotation
library(AppliedPredictiveModeling)
d <- data(segmentationOriginal)
library(caret)
head(d)
dim(d)
data(segmentationOriginal)
segmentationOriginal
d <- segmentationOriginal
names(d)
summary(d)
Train <- d[ which(d$Case=="Train"),]
Test <- d[ which(d$Case!="Train"),]
dim(Train)
dim(Test)
set.seed(125)
modFit <- train(Class ~ .,data=Train,method="rpart")
modFit$finalModel
library(pgmm)
d <- olive
d = d[,-1]
install.packages("pgmm")
library("pgmm", lib.loc="C:/Users/jason/Documents/R/win-library/3.1")
d <- olive
d = d[,-1]
olive
data(olive)
olive
d <- olive
d = d[,-1]
dim(d)
head(d)
summary(d)
modFit <- train(Area ~ .,data=d,method="rpart")
modFit$finalModel
newdata = as.data.frame(t(colMeans(olive)))
dim(newdata)
predict(modFit, newdata = as.data.frame(t(colMeans(olive))))
data(segmentationOriginal)
d <- segmentationOriginal
d
set.seed(125)
Train <- d[ which(d$Case=="Train"),]
Test <- d[ which(d$Case!="Train"),]
modFit <- train(Class ~ .,data=Train,method="rpart")
modFit$finalModel
?train()
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library("ElemStatLearn", lib.loc="C:/Users/jason/Documents/R/win-library/3.1")
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
head(train)
head(SAheart)
set.seed(13234)
modFit <- train(chd ~ age:alcohol:obesity:tobacco:typea:ldl, data=TrainSA, family="binomial", method="glm")
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(chd ~ age:alcohol:obesity:tobacco:typea:ldl, data=TrainSA, family="binomial", method="glm")
modFit <- train(chd ~ age:alcohol:obesity:tobacco:typea:ldl, data=trainSA, family="binomial", method="glm")
modFit$finalModel
predict(modFit, newdata=testSA)
head(SAheart)
values <- testSA[,10]
prediction <- predict(modFit, newdata=testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
missClass(values, prediction)
values <- trainSA[,10]
missClass(values, prediction)
prediction <- predict(modFit, newdata=trainSA)
missClass(values, prediction)
modFit$finalModel
head(SAheart)
dim(trainSA)
dim(testSA)
dim(SAheart)
values_train <- trainSA[,10]
prediction_train <- predict(modFit, newdata=trainSA)
values_test <- testSA[,10]
prediction_test <- predict(modFit, newdata=testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(values_train,prediction_train)
missClass(values_test,prediction_test)
data(SAheart)
set.seed(8484)
names(SAheart)
class(SAheart$chd)
SAheart$chd <- factor(SAheart$chd)
modFit <- train(chd ~ age:alcohol:obesity:tobacco:typea:ldl, data=trainSA, family="binomial", method="glm")
values_train <- trainSA[,10]
prediction_train <- predict(modFit, newdata=trainSA)
values_test <- testSA[,10]
prediction_test <- predict(modFit, newdata=testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(values_train,prediction_train)
missClass(values_test,prediction_test)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(chd ~ age:alcohol:obesity:tobacco:typea:ldl, data=trainSA, family="binomial", method="glm")
values_train <- trainSA[,10]
prediction_train <- predict(modFit, newdata=trainSA)
values_test <- testSA[,10]
prediction_test <- predict(modFit, newdata=testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(values_train,prediction_train)
missClass(values_test,prediction_test)
table(values_train, prediction_train)
table(values_test, prediction_test)
(141+9)/(141+6+75+9)
(153+7)/(141+6+75+9)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
data(vowel.train)
data(vowel.test)
set.seed(33833)
modFit <- train(y ~ .,data=vowel.train,method="rf")
data(vowel.train)
data(vowel.test)
set.seed(33833)
modFit <- train(y ~ .,data=vowel.train,method="rf")
varImp(modFit, scale = FALSE)
varImp(modFit$finalModel, scale = FALSE)
importance(modFit$finalModel)
modFit <- train(y ~ .,data=vowel.train,method="rf", importance=true)
?train()
modFit <- train(y ~ .,data=vowel.train,method="rf", importance=T)
varImp(modFit$finalModel, scale = FALSE)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
SAheart$chd <- factor(SAheart$chd)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, family="binomial", method="glm")
values_train <- trainSA[,10]
prediction_train <- predict(modFit, newdata=trainSA)
values_test <- testSA[,10]
prediction_test <- predict(modFit, newdata=testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(values_train,prediction_train)
missClass(values_test,prediction_test)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modFit <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl, data=trainSA, family="binomial", method="glm")
values_train <- trainSA[,10]
prediction_train <- predict(modFit, newdata=trainSA)
values_test <- testSA[,10]
prediction_test <- predict(modFit, newdata=testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(values_train,prediction_train)
missClass(values_test,prediction_test)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
d <- segmentationOriginal
library(caret)
set.seed(125)
Train <- d[ which(d$Case=="Train"),]
Test <- d[ which(d$Case!="Train"),]
modFit <- train(Class ~ .,data=Train,method="rpart")
modFit$finalModel
fancyRpartPlot(modFit$finalModel)
library(rattle)
install.packages("rattle")
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit)
data(rattle)
library(rattle)
fancyRpartPlot(modFit)
library(rpart)
fancyRpartPlot(modFit)
modFit$finalModel
?fancyRpartPlot
model <- rpart(Class~ ., data=Train)
fancyRpartPlot(model)
?rattle
fancyRpartPlot(model)
fancyRpartPlot()
fancyRpartPlot(model)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
install.packages("GenomicInteractions")
install.packages("GenomicInteractions")
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicInteractions")
browseVignettes("GenomicInteractions")
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicInteractions")
library(devtools)
install_github("ComputationalRegulatoryGenomicsICL/GenomicInteractions")
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicInteractions")
ap <- available.packages()
view(ap)
View(ap)
"GenomicInteractions" %in% rownames(ap)
data()
ap["GenomicInteractions"]
install_github("ComputationalRegulatoryGenomicsICL/GenomicInteractions")
install.packages("devtools")
install_github("ComputationalRegulatoryGenomicsICL/GenomicInteractions")
library(devtools)
install.packages("Rtools")
library(Rtools)
source("http://cran.r-project.org/bin/windows/Rtools/")
source("http://cran.r-project.org/bin/windows/Rtools/")
source("http://cran.r-project.org/bin/windows/Rtools")
find_rtools()
source("http://cran.r-project.org/bin/windows/Rtools/Rtools33.exe")
find_rtools()
source("http://cran.r-project.org/bin/windows/Rtools/Rtools33.exe")
library("GenomicRanges", lib.loc="C:/Users/jason/Documents/R/win-library/3.1")
install.packages("BiocGenerics")
library("BiocGenerics", lib.loc="C:/Users/jason/Documents/R/win-library/3.1")
detach("package:datasets", unload=TRUE)
library(GenomicInteractions)
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicInteractions")
library(GenomicInteractions)
biocLite("GenomicInteractions")
biocLite("GenomicInteractions")
biocLite("GenomicInteractions")
biocLite("GenomicInteractions")
library(devtools)
install_github("ComputationalRegulatoryGenomicsICL/GenomicInteractions")
install.packages("Rsamtools")
source("http://bioconductor.org/biocLite.R")
biocLite("Rsamtools")
biocLite("rtracklayer")
biocLite("S4Vectors")
source("http://bioconductor.org/biocLite.R")
biocLite("S4Vectors")
biocLite("S4Vectors")
install_github("ComputationalRegulatoryGenomicsICL/GenomicInteractions")
browseVignettes("S4Vectors")
source("http://bioconductor.org/biocLite.R")
biocLite("S4Vectors")
install.packages("C:/Users/jason/Desktop/S4Vectors_0.6.0.zip", repos = NULL)
install_github("ComputationalRegulatoryGenomicsICL/GenomicInteractions")
library("S4Vectors", lib.loc="C:/Users/jason/Documents/R/win-library/3.1")
install_github("ComputationalRegulatoryGenomicsICL/GenomicInteractions")
library(plyr)
install.packages("plyr")
install_github("ComputationalRegulatoryGenomicsICL/GenomicInteractions")
install.packages("colorspace")
install_github("ComputationalRegulatoryGenomicsICL/GenomicInteractions")
library(GenomicInteractions)
library(GenomicRanges)
chiapet.data = system.file("extdata/k562.rep1.cluster.pet3+.txt",
package="GenomicInteractions")
k562.rep1 = makeGenomicInteractionsFromFile(chiapet.data,
type="chiapet.tool",
experiment_name="k562",
description="k562 pol2 8wg16")
name(k562.rep1)
description(k562.rep1) = "PolII-8wg16 Chia-PET for K562"
head(interactionCounts(k562.rep1))
head((k562.rep1)$fdr)
hist(-log10(k562.rep1$p.value))
anchorOne(k562.rep1)
anchorTwo(k562.rep1)
sprintf("Percentage of trans-chromosomal interactions %.2f",
100*sum(is.trans(k562.rep1))/length(k562.rep1))
head(calculateDistances(k562.rep1, method="midpoint"))
k562.rep1[1:10]
k562.rep1[sample(length(k562.rep1), 100)]
k562.cis = k562.rep1[is.cis(k562.rep1)]
head(calculateDistances(k562.cis, method="midpoint"))
k562.short = k562.cis[calculateDistances(k562.cis) < 1e6] # subset shorter interactions
hist(calculateDistances(k562.short))
chrom = c("chr17", "chr18")
sub = as.vector(seqnames(anchorOne(k562.rep1)) %in% chrom & seqnames(anchorTwo(k562.rep1)) %in% chrom)
k562.rep1 = k562.rep1[sub]
ls()
head(chiapet.data)
names(chiapet.data)
names("chiapet.data")
chiapet.data
chrom
conf95_wt
K562.short
K562.rep1
chiapet.data
K562.cis
k562.cis
ls()
k562.rep1
ls()
k562.short
chiapet.data
library(shiny)
runApp("my_app")
runExample("01_hello")
runExample("02_text") # tables and data frames
runExample("03_reactivity") # a reactive expression
runExample("04_mpg") # global variables
install.packages(c("caret", "devtools", "knitr", "rmarkdown", "shiny"))
setwd("C:/Users/jason/Desktop/Coursera_homeworks/Develope_data_product/data_product_project2")
library("knitr", lib.loc="~/R/win-library/3.1")
library("rCharts", lib.loc="~/R/win-library/3.1")
library("slidify", lib.loc="~/R/win-library/3.1")
library("slidifyLibraries", lib.loc="~/R/win-library/3.1")
library("shinyapps", lib.loc="~/R/win-library/3.1")
library("shiny", lib.loc="~/R/win-library/3.1")
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
library("devtools", lib.loc="~/R/win-library/3.1")
install.packages("Rtools")
library("devtools", lib.loc="~/R/win-library/3.1")
browseURL('index.html')
?knitr
knit('document.Rmd')
setwd("C:/Users/jason/Desktop/Coursera_homeworks/Develope_data_product/project1_v2")
knit('document.Rmd')
setwd("C:/Users/jason/Desktop/Coursera_homeworks/Develope_data_product/data_product_project2")
slidify('index.Rmd')
library("slidify", lib.loc="~/R/win-library/3.1")
library("slidifyLibraries", lib.loc="~/R/win-library/3.1")
library("rCharts", lib.loc="~/R/win-library/3.1")
runDeck()
library(shinyApps)
library(shinyapps)
library("shinyapps", lib.loc="~/R/win-library/3.1")
library("shiny", lib.loc="~/R/win-library/3.1")
shinyapps::deployApp("project1_v2")
setwd("C:/Users/jason/Desktop/Coursera_homeworks/Develope_data_product")
shinyapps::deployApp("project1_v2")
runDeck()
setwd("C:/Users/jason/Desktop/Coursera_homeworks/Develope_data_product/data_product_project2")
runDeck()
slidify("index.Rmd")  #To make the .html
browseURL("index.html") #To verify that it's working
runDeck()
options(rpubs.upload.method = "internal") #To set up what it needs to upload (ssl issue?)
publish_rpubs(title = 'my title goes here ', html_file = 'index.html')
setwd("C:/Users/jason/Desktop/Coursera_homeworks/Develope_data_product/project1_v2")
browseURL("document.html") #To verify that it's working
runDeck()
setwd("C:/Users/jason/Desktop/Coursera_homeworks/Develope_data_product")
runApp("Project1_v2")
knitr('document.Rmd')
knit('document.Rmd')
setwd("C:/Users/jason/Desktop/Coursera_homeworks/Develope_data_product/project1_v2")
knit('document.Rmd')
knit('document.Rmd')
